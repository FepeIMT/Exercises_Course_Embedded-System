
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  080001c0  080001c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001080  08001080  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08001080  08001080  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001080  08001080  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001080  08001080  00011080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001088  08001088  00011088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08001090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000078  08001108  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001108  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022c2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000656  00000000  00000000  0002236a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000190  00000000  00000000  000229c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000158  00000000  00000000  00022b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000027f7  00000000  00000000  00022ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013f1  00000000  00000000  0002549f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008a68  00000000  00000000  00026890  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f2f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae0  00000000  00000000  0002f374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08000f78 	.word	0x08000f78

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	08000f78 	.word	0x08000f78

08000200 <main>:
uint32_t current_task = 0; //Task1 is running



int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	enable_processor_faults();
 8000204:	f000 f8c8 	bl	8000398 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <main+0x3c>)
 800020a:	f000 f879 	bl	8000300 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 800020e:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <main+0x40>)
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <main+0x44>)
 8000212:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000214:	4a0c      	ldr	r2, [pc, #48]	; (8000248 <main+0x48>)
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <main+0x44>)
 8000218:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 800021a:	4a0c      	ldr	r2, [pc, #48]	; (800024c <main+0x4c>)
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <main+0x44>)
 800021e:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <main+0x50>)
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x44>)
 8000224:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 8000226:	f000 f871 	bl	800030c <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 800022a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022e:	f000 f831 	bl	8000294 <init_systick_timer>

	switch_sp_to_psp();
 8000232:	f000 f909 	bl	8000448 <switch_sp_to_psp>

	task1_handler();
 8000236:	f000 f80d 	bl	8000254 <task1_handler>

	for(;;);
 800023a:	e7fe      	b.n	800023a <main+0x3a>
 800023c:	2004f000 	.word	0x2004f000
 8000240:	08000255 	.word	0x08000255
 8000244:	200000a4 	.word	0x200000a4
 8000248:	08000265 	.word	0x08000265
 800024c:	08000275 	.word	0x08000275
 8000250:	08000285 	.word	0x08000285

08000254 <task1_handler>:
}

void task1_handler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task1\n");
 8000258:	4801      	ldr	r0, [pc, #4]	; (8000260 <task1_handler+0xc>)
 800025a:	f000 fa81 	bl	8000760 <puts>
 800025e:	e7fb      	b.n	8000258 <task1_handler+0x4>
 8000260:	08000f90 	.word	0x08000f90

08000264 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task2\n");
 8000268:	4801      	ldr	r0, [pc, #4]	; (8000270 <task2_handler+0xc>)
 800026a:	f000 fa79 	bl	8000760 <puts>
 800026e:	e7fb      	b.n	8000268 <task2_handler+0x4>
 8000270:	08000fa0 	.word	0x08000fa0

08000274 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task3\n");
 8000278:	4801      	ldr	r0, [pc, #4]	; (8000280 <task3_handler+0xc>)
 800027a:	f000 fa71 	bl	8000760 <puts>
 800027e:	e7fb      	b.n	8000278 <task3_handler+0x4>
 8000280:	08000fb0 	.word	0x08000fb0

08000284 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task4\n");
 8000288:	4801      	ldr	r0, [pc, #4]	; (8000290 <task4_handler+0xc>)
 800028a:	f000 fa69 	bl	8000760 <puts>
 800028e:	e7fb      	b.n	8000288 <task4_handler+0x4>
 8000290:	08000fc0 	.word	0x08000fc0

08000294 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 8000294:	b480      	push	{r7}
 8000296:	b087      	sub	sp, #28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

	uint32_t *pSRVR = (uint32_t*)0xE000E014;  //Systick Reload Value Register SYST_CVR register
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <init_systick_timer+0x60>)
 800029e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <init_systick_timer+0x64>)
 80002a2:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) -1;
 80002a4:	4a15      	ldr	r2, [pc, #84]	; (80002fc <init_systick_timer+0x68>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ac:	3b01      	subs	r3, #1
 80002ae:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]

	//load the value in to SVR
	*pSRVR |= count_value;
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	431a      	orrs	r2, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	601a      	str	r2, [r3, #0]

	//more settings
	*pSCSR |= ( 1 << 1);  //Enables Systick exception request:
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0202 	orr.w	r2, r3, #2
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	601a      	str	r2, [r3, #0]
	*pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0204 	orr.w	r2, r3, #4
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	601a      	str	r2, [r3, #0]


	//enable the systick
	*pSCSR |= ( 1 << 0); //enables the counter
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0201 	orr.w	r2, r3, #1
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	601a      	str	r2, [r3, #0]

}
 80002e6:	bf00      	nop
 80002e8:	371c      	adds	r7, #28
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000e014 	.word	0xe000e014
 80002f8:	e000e010 	.word	0xe000e010
 80002fc:	00f42400 	.word	0x00f42400

08000300 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000300:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack)	 :	 );
 8000302:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 8000306:	4770      	bx	lr

}
 8000308:	bf00      	nop
	...

0800030c <init_tasks_stack>:


void init_tasks_stack(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0

	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	e032      	b.n	800037e <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*) psp_of_tasks[i];
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <init_tasks_stack+0x84>)
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000320:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3b04      	subs	r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800032e:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3b04      	subs	r3, #4
 8000334:	60fb      	str	r3, [r7, #12]
		*pPSP =  task_handlers[i];
 8000336:	4a17      	ldr	r2, [pc, #92]	; (8000394 <init_tasks_stack+0x88>)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3b04      	subs	r3, #4
 8000346:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f06f 0202 	mvn.w	r2, #2
 800034e:	601a      	str	r2, [r3, #0]


		for(int j = 0; j < 13; j++)
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	e008      	b.n	8000368 <init_tasks_stack+0x5c>
		{
			pPSP--; //
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3b04      	subs	r3, #4
 800035a:	60fb      	str	r3, [r7, #12]
			*pPSP = 0x00;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b0c      	cmp	r3, #12
 800036c:	ddf3      	ble.n	8000356 <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP;
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <init_tasks_stack+0x84>)
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++)
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	3301      	adds	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	2b03      	cmp	r3, #3
 8000382:	ddc9      	ble.n	8000318 <init_tasks_stack+0xc>

	}


}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	20000000 	.word	0x20000000
 8000394:	200000a4 	.word	0x200000a4

08000398 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800039e:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <enable_processor_faults+0x3c>)
 80003a0:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); // Mem manage fault enable bit according with cortex-M4 Devices Generic User Guide
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // Bust fault enable bit
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); // Usage fault enable bit
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	601a      	str	r2, [r3, #0]



}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000ed24 	.word	0xe000ed24

080003d8 <get_psp_value>:

uint32_t get_psp_value(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

	return psp_of_tasks[current_task];
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <get_psp_value+0x18>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <get_psp_value+0x1c>)
 80003e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	20000094 	.word	0x20000094
 80003f4:	20000000 	.word	0x20000000

080003f8 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <save_psp_value+0x20>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4905      	ldr	r1, [pc, #20]	; (800041c <save_psp_value+0x24>)
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	20000094 	.word	0x20000094
 800041c:	20000000 	.word	0x20000000

08000420 <update_next_task>:

void update_next_task(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	current_task++;
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <update_next_task+0x24>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	4a06      	ldr	r2, [pc, #24]	; (8000444 <update_next_task+0x24>)
 800042c:	6013      	str	r3, [r2, #0]
	current_task %= MAX_TASKS;
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <update_next_task+0x24>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 0303 	and.w	r3, r3, #3
 8000436:	4a03      	ldr	r2, [pc, #12]	; (8000444 <update_next_task+0x24>)
 8000438:	6013      	str	r3, [r2, #0]

}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	20000094 	.word	0x20000094

08000448 <switch_sp_to_psp>:
{
	//1. Initialize the PSP with TASK1 stack start address


	//get the value of PSP of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000448:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800044a:	f7ff ffc5 	bl	80003d8 <get_psp_value>
	__asm volatile ("MSR PSP, R0");  //initialize psp
 800044e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");    //pops back LR value
 8000452:	f85d eb04 	ldr.w	lr, [sp], #4


	//2.- Change SP to PSP using CONTROL register
	__asm volatile ("MOV R0, #0X02");
 8000456:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 800045a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800045e:	4770      	bx	lr


}
 8000460:	bf00      	nop

08000462 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0, PSP");
 8000466:	f3ef 8009 	mrs	r0, PSP

	//2. Using that PSP value store SF2 (R4 to R11)
	__asm volatile("STMDB R0!, {R4-R11}");
 800046a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//3. Save the current value of PSP
	__asm volatile("BL save_psp_value");
 800046e:	f7ff ffc3 	bl	80003f8 <save_psp_value>


	/*Retrieve the context of the next task */

	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 8000472:	f7ff ffd5 	bl	8000420 <update_next_task>

	//2. Get its past PSP value
	__asm volatile ("BL get_psp_value");
 8000476:	f7ff ffaf 	bl	80003d8 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!, {R4-R11}");
 800047a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. Update PSP and exit
	__asm volatile("MSR PSP, R0");
 800047e:	f380 8809 	msr	PSP, r0

}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <HardFault_Handler>:


//2. Implement the fault handlers
void HardFault_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	printf("Exception : HardFault\n");
 8000490:	4801      	ldr	r0, [pc, #4]	; (8000498 <HardFault_Handler+0xc>)
 8000492:	f000 f965 	bl	8000760 <puts>
	while(1);
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0xa>
 8000498:	08000fd0 	.word	0x08000fd0

0800049c <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80004a0:	4801      	ldr	r0, [pc, #4]	; (80004a8 <MemManage_Handler+0xc>)
 80004a2:	f000 f95d 	bl	8000760 <puts>
	while(1);
 80004a6:	e7fe      	b.n	80004a6 <MemManage_Handler+0xa>
 80004a8:	08000fe8 	.word	0x08000fe8

080004ac <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80004b0:	4801      	ldr	r0, [pc, #4]	; (80004b8 <BusFault_Handler+0xc>)
 80004b2:	f000 f955 	bl	8000760 <puts>
	while(1);
 80004b6:	e7fe      	b.n	80004b6 <BusFault_Handler+0xa>
 80004b8:	08001000 	.word	0x08001000

080004bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	e00a      	b.n	80004e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004ce:	f3af 8000 	nop.w
 80004d2:	4601      	mov	r1, r0
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	60ba      	str	r2, [r7, #8]
 80004da:	b2ca      	uxtb	r2, r1
 80004dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3301      	adds	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	dbf0      	blt.n	80004ce <_read+0x12>
	}

return len;
 80004ec:	687b      	ldr	r3, [r7, #4]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b086      	sub	sp, #24
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	60f8      	str	r0, [r7, #12]
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	e009      	b.n	800051c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	60ba      	str	r2, [r7, #8]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	3301      	adds	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	dbf1      	blt.n	8000508 <_write+0x12>
	}
	return len;
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <_close>:

int _close(int file)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
	return -1;
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000556:	605a      	str	r2, [r3, #4]
	return 0;
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <_isatty>:

int _isatty(int file)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
	return 1;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
	return 0;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <_sbrk+0x50>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x16>
		heap_end = &end;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <_sbrk+0x50>)
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <_sbrk+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <_sbrk+0x50>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <_sbrk+0x50>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	466a      	mov	r2, sp
 80005be:	4293      	cmp	r3, r2
 80005c0:	d907      	bls.n	80005d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80005c2:	f000 f83f 	bl	8000644 <__errno>
 80005c6:	4602      	mov	r2, r0
 80005c8:	230c      	movs	r3, #12
 80005ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	e006      	b.n	80005e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <_sbrk+0x50>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <_sbrk+0x50>)
 80005dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000098 	.word	0x20000098
 80005ec:	200000b8 	.word	0x200000b8

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005f6:	490e      	ldr	r1, [pc, #56]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 800060c:	4c0b      	ldr	r4, [pc, #44]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800061a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800061e:	f000 f817 	bl	8000650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fded 	bl	8000200 <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000634:	08001090 	.word	0x08001090
  ldr r2, =_sbss
 8000638:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800063c:	200000b8 	.word	0x200000b8

08000640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_2_IRQHandler>
	...

08000644 <__errno>:
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <__errno+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000010 	.word	0x20000010

08000650 <__libc_init_array>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	4e0d      	ldr	r6, [pc, #52]	; (8000688 <__libc_init_array+0x38>)
 8000654:	4c0d      	ldr	r4, [pc, #52]	; (800068c <__libc_init_array+0x3c>)
 8000656:	1ba4      	subs	r4, r4, r6
 8000658:	10a4      	asrs	r4, r4, #2
 800065a:	2500      	movs	r5, #0
 800065c:	42a5      	cmp	r5, r4
 800065e:	d109      	bne.n	8000674 <__libc_init_array+0x24>
 8000660:	4e0b      	ldr	r6, [pc, #44]	; (8000690 <__libc_init_array+0x40>)
 8000662:	4c0c      	ldr	r4, [pc, #48]	; (8000694 <__libc_init_array+0x44>)
 8000664:	f000 fc88 	bl	8000f78 <_init>
 8000668:	1ba4      	subs	r4, r4, r6
 800066a:	10a4      	asrs	r4, r4, #2
 800066c:	2500      	movs	r5, #0
 800066e:	42a5      	cmp	r5, r4
 8000670:	d105      	bne.n	800067e <__libc_init_array+0x2e>
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000678:	4798      	blx	r3
 800067a:	3501      	adds	r5, #1
 800067c:	e7ee      	b.n	800065c <__libc_init_array+0xc>
 800067e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000682:	4798      	blx	r3
 8000684:	3501      	adds	r5, #1
 8000686:	e7f2      	b.n	800066e <__libc_init_array+0x1e>
 8000688:	08001080 	.word	0x08001080
 800068c:	08001080 	.word	0x08001080
 8000690:	08001080 	.word	0x08001080
 8000694:	08001084 	.word	0x08001084

08000698 <memset>:
 8000698:	4402      	add	r2, r0
 800069a:	4603      	mov	r3, r0
 800069c:	4293      	cmp	r3, r2
 800069e:	d100      	bne.n	80006a2 <memset+0xa>
 80006a0:	4770      	bx	lr
 80006a2:	f803 1b01 	strb.w	r1, [r3], #1
 80006a6:	e7f9      	b.n	800069c <memset+0x4>

080006a8 <_puts_r>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	460e      	mov	r6, r1
 80006ac:	4605      	mov	r5, r0
 80006ae:	b118      	cbz	r0, 80006b8 <_puts_r+0x10>
 80006b0:	6983      	ldr	r3, [r0, #24]
 80006b2:	b90b      	cbnz	r3, 80006b8 <_puts_r+0x10>
 80006b4:	f000 fa0c 	bl	8000ad0 <__sinit>
 80006b8:	69ab      	ldr	r3, [r5, #24]
 80006ba:	68ac      	ldr	r4, [r5, #8]
 80006bc:	b913      	cbnz	r3, 80006c4 <_puts_r+0x1c>
 80006be:	4628      	mov	r0, r5
 80006c0:	f000 fa06 	bl	8000ad0 <__sinit>
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <_puts_r+0xac>)
 80006c6:	429c      	cmp	r4, r3
 80006c8:	d117      	bne.n	80006fa <_puts_r+0x52>
 80006ca:	686c      	ldr	r4, [r5, #4]
 80006cc:	89a3      	ldrh	r3, [r4, #12]
 80006ce:	071b      	lsls	r3, r3, #28
 80006d0:	d51d      	bpl.n	800070e <_puts_r+0x66>
 80006d2:	6923      	ldr	r3, [r4, #16]
 80006d4:	b1db      	cbz	r3, 800070e <_puts_r+0x66>
 80006d6:	3e01      	subs	r6, #1
 80006d8:	68a3      	ldr	r3, [r4, #8]
 80006da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006de:	3b01      	subs	r3, #1
 80006e0:	60a3      	str	r3, [r4, #8]
 80006e2:	b9e9      	cbnz	r1, 8000720 <_puts_r+0x78>
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da2e      	bge.n	8000746 <_puts_r+0x9e>
 80006e8:	4622      	mov	r2, r4
 80006ea:	210a      	movs	r1, #10
 80006ec:	4628      	mov	r0, r5
 80006ee:	f000 f83f 	bl	8000770 <__swbuf_r>
 80006f2:	3001      	adds	r0, #1
 80006f4:	d011      	beq.n	800071a <_puts_r+0x72>
 80006f6:	200a      	movs	r0, #10
 80006f8:	e011      	b.n	800071e <_puts_r+0x76>
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <_puts_r+0xb0>)
 80006fc:	429c      	cmp	r4, r3
 80006fe:	d101      	bne.n	8000704 <_puts_r+0x5c>
 8000700:	68ac      	ldr	r4, [r5, #8]
 8000702:	e7e3      	b.n	80006cc <_puts_r+0x24>
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <_puts_r+0xb4>)
 8000706:	429c      	cmp	r4, r3
 8000708:	bf08      	it	eq
 800070a:	68ec      	ldreq	r4, [r5, #12]
 800070c:	e7de      	b.n	80006cc <_puts_r+0x24>
 800070e:	4621      	mov	r1, r4
 8000710:	4628      	mov	r0, r5
 8000712:	f000 f87f 	bl	8000814 <__swsetup_r>
 8000716:	2800      	cmp	r0, #0
 8000718:	d0dd      	beq.n	80006d6 <_puts_r+0x2e>
 800071a:	f04f 30ff 	mov.w	r0, #4294967295
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	2b00      	cmp	r3, #0
 8000722:	da04      	bge.n	800072e <_puts_r+0x86>
 8000724:	69a2      	ldr	r2, [r4, #24]
 8000726:	429a      	cmp	r2, r3
 8000728:	dc06      	bgt.n	8000738 <_puts_r+0x90>
 800072a:	290a      	cmp	r1, #10
 800072c:	d004      	beq.n	8000738 <_puts_r+0x90>
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	6022      	str	r2, [r4, #0]
 8000734:	7019      	strb	r1, [r3, #0]
 8000736:	e7cf      	b.n	80006d8 <_puts_r+0x30>
 8000738:	4622      	mov	r2, r4
 800073a:	4628      	mov	r0, r5
 800073c:	f000 f818 	bl	8000770 <__swbuf_r>
 8000740:	3001      	adds	r0, #1
 8000742:	d1c9      	bne.n	80006d8 <_puts_r+0x30>
 8000744:	e7e9      	b.n	800071a <_puts_r+0x72>
 8000746:	6823      	ldr	r3, [r4, #0]
 8000748:	200a      	movs	r0, #10
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	6022      	str	r2, [r4, #0]
 800074e:	7018      	strb	r0, [r3, #0]
 8000750:	e7e5      	b.n	800071e <_puts_r+0x76>
 8000752:	bf00      	nop
 8000754:	0800103c 	.word	0x0800103c
 8000758:	0800105c 	.word	0x0800105c
 800075c:	0800101c 	.word	0x0800101c

08000760 <puts>:
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <puts+0xc>)
 8000762:	4601      	mov	r1, r0
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	f7ff bf9f 	b.w	80006a8 <_puts_r>
 800076a:	bf00      	nop
 800076c:	20000010 	.word	0x20000010

08000770 <__swbuf_r>:
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000772:	460e      	mov	r6, r1
 8000774:	4614      	mov	r4, r2
 8000776:	4605      	mov	r5, r0
 8000778:	b118      	cbz	r0, 8000782 <__swbuf_r+0x12>
 800077a:	6983      	ldr	r3, [r0, #24]
 800077c:	b90b      	cbnz	r3, 8000782 <__swbuf_r+0x12>
 800077e:	f000 f9a7 	bl	8000ad0 <__sinit>
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <__swbuf_r+0x98>)
 8000784:	429c      	cmp	r4, r3
 8000786:	d12a      	bne.n	80007de <__swbuf_r+0x6e>
 8000788:	686c      	ldr	r4, [r5, #4]
 800078a:	69a3      	ldr	r3, [r4, #24]
 800078c:	60a3      	str	r3, [r4, #8]
 800078e:	89a3      	ldrh	r3, [r4, #12]
 8000790:	071a      	lsls	r2, r3, #28
 8000792:	d52e      	bpl.n	80007f2 <__swbuf_r+0x82>
 8000794:	6923      	ldr	r3, [r4, #16]
 8000796:	b363      	cbz	r3, 80007f2 <__swbuf_r+0x82>
 8000798:	6923      	ldr	r3, [r4, #16]
 800079a:	6820      	ldr	r0, [r4, #0]
 800079c:	1ac0      	subs	r0, r0, r3
 800079e:	6963      	ldr	r3, [r4, #20]
 80007a0:	b2f6      	uxtb	r6, r6
 80007a2:	4283      	cmp	r3, r0
 80007a4:	4637      	mov	r7, r6
 80007a6:	dc04      	bgt.n	80007b2 <__swbuf_r+0x42>
 80007a8:	4621      	mov	r1, r4
 80007aa:	4628      	mov	r0, r5
 80007ac:	f000 f926 	bl	80009fc <_fflush_r>
 80007b0:	bb28      	cbnz	r0, 80007fe <__swbuf_r+0x8e>
 80007b2:	68a3      	ldr	r3, [r4, #8]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	60a3      	str	r3, [r4, #8]
 80007b8:	6823      	ldr	r3, [r4, #0]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	6022      	str	r2, [r4, #0]
 80007be:	701e      	strb	r6, [r3, #0]
 80007c0:	6963      	ldr	r3, [r4, #20]
 80007c2:	3001      	adds	r0, #1
 80007c4:	4283      	cmp	r3, r0
 80007c6:	d004      	beq.n	80007d2 <__swbuf_r+0x62>
 80007c8:	89a3      	ldrh	r3, [r4, #12]
 80007ca:	07db      	lsls	r3, r3, #31
 80007cc:	d519      	bpl.n	8000802 <__swbuf_r+0x92>
 80007ce:	2e0a      	cmp	r6, #10
 80007d0:	d117      	bne.n	8000802 <__swbuf_r+0x92>
 80007d2:	4621      	mov	r1, r4
 80007d4:	4628      	mov	r0, r5
 80007d6:	f000 f911 	bl	80009fc <_fflush_r>
 80007da:	b190      	cbz	r0, 8000802 <__swbuf_r+0x92>
 80007dc:	e00f      	b.n	80007fe <__swbuf_r+0x8e>
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <__swbuf_r+0x9c>)
 80007e0:	429c      	cmp	r4, r3
 80007e2:	d101      	bne.n	80007e8 <__swbuf_r+0x78>
 80007e4:	68ac      	ldr	r4, [r5, #8]
 80007e6:	e7d0      	b.n	800078a <__swbuf_r+0x1a>
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <__swbuf_r+0xa0>)
 80007ea:	429c      	cmp	r4, r3
 80007ec:	bf08      	it	eq
 80007ee:	68ec      	ldreq	r4, [r5, #12]
 80007f0:	e7cb      	b.n	800078a <__swbuf_r+0x1a>
 80007f2:	4621      	mov	r1, r4
 80007f4:	4628      	mov	r0, r5
 80007f6:	f000 f80d 	bl	8000814 <__swsetup_r>
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d0cc      	beq.n	8000798 <__swbuf_r+0x28>
 80007fe:	f04f 37ff 	mov.w	r7, #4294967295
 8000802:	4638      	mov	r0, r7
 8000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000806:	bf00      	nop
 8000808:	0800103c 	.word	0x0800103c
 800080c:	0800105c 	.word	0x0800105c
 8000810:	0800101c 	.word	0x0800101c

08000814 <__swsetup_r>:
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <__swsetup_r+0xcc>)
 8000816:	b570      	push	{r4, r5, r6, lr}
 8000818:	681d      	ldr	r5, [r3, #0]
 800081a:	4606      	mov	r6, r0
 800081c:	460c      	mov	r4, r1
 800081e:	b125      	cbz	r5, 800082a <__swsetup_r+0x16>
 8000820:	69ab      	ldr	r3, [r5, #24]
 8000822:	b913      	cbnz	r3, 800082a <__swsetup_r+0x16>
 8000824:	4628      	mov	r0, r5
 8000826:	f000 f953 	bl	8000ad0 <__sinit>
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <__swsetup_r+0xd0>)
 800082c:	429c      	cmp	r4, r3
 800082e:	d10f      	bne.n	8000850 <__swsetup_r+0x3c>
 8000830:	686c      	ldr	r4, [r5, #4]
 8000832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000836:	b29a      	uxth	r2, r3
 8000838:	0715      	lsls	r5, r2, #28
 800083a:	d42c      	bmi.n	8000896 <__swsetup_r+0x82>
 800083c:	06d0      	lsls	r0, r2, #27
 800083e:	d411      	bmi.n	8000864 <__swsetup_r+0x50>
 8000840:	2209      	movs	r2, #9
 8000842:	6032      	str	r2, [r6, #0]
 8000844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000848:	81a3      	strh	r3, [r4, #12]
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	e03e      	b.n	80008ce <__swsetup_r+0xba>
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <__swsetup_r+0xd4>)
 8000852:	429c      	cmp	r4, r3
 8000854:	d101      	bne.n	800085a <__swsetup_r+0x46>
 8000856:	68ac      	ldr	r4, [r5, #8]
 8000858:	e7eb      	b.n	8000832 <__swsetup_r+0x1e>
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <__swsetup_r+0xd8>)
 800085c:	429c      	cmp	r4, r3
 800085e:	bf08      	it	eq
 8000860:	68ec      	ldreq	r4, [r5, #12]
 8000862:	e7e6      	b.n	8000832 <__swsetup_r+0x1e>
 8000864:	0751      	lsls	r1, r2, #29
 8000866:	d512      	bpl.n	800088e <__swsetup_r+0x7a>
 8000868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800086a:	b141      	cbz	r1, 800087e <__swsetup_r+0x6a>
 800086c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000870:	4299      	cmp	r1, r3
 8000872:	d002      	beq.n	800087a <__swsetup_r+0x66>
 8000874:	4630      	mov	r0, r6
 8000876:	f000 fa19 	bl	8000cac <_free_r>
 800087a:	2300      	movs	r3, #0
 800087c:	6363      	str	r3, [r4, #52]	; 0x34
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000884:	81a3      	strh	r3, [r4, #12]
 8000886:	2300      	movs	r3, #0
 8000888:	6063      	str	r3, [r4, #4]
 800088a:	6923      	ldr	r3, [r4, #16]
 800088c:	6023      	str	r3, [r4, #0]
 800088e:	89a3      	ldrh	r3, [r4, #12]
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	81a3      	strh	r3, [r4, #12]
 8000896:	6923      	ldr	r3, [r4, #16]
 8000898:	b94b      	cbnz	r3, 80008ae <__swsetup_r+0x9a>
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a4:	d003      	beq.n	80008ae <__swsetup_r+0x9a>
 80008a6:	4621      	mov	r1, r4
 80008a8:	4630      	mov	r0, r6
 80008aa:	f000 f9bf 	bl	8000c2c <__smakebuf_r>
 80008ae:	89a2      	ldrh	r2, [r4, #12]
 80008b0:	f012 0301 	ands.w	r3, r2, #1
 80008b4:	d00c      	beq.n	80008d0 <__swsetup_r+0xbc>
 80008b6:	2300      	movs	r3, #0
 80008b8:	60a3      	str	r3, [r4, #8]
 80008ba:	6963      	ldr	r3, [r4, #20]
 80008bc:	425b      	negs	r3, r3
 80008be:	61a3      	str	r3, [r4, #24]
 80008c0:	6923      	ldr	r3, [r4, #16]
 80008c2:	b953      	cbnz	r3, 80008da <__swsetup_r+0xc6>
 80008c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80008cc:	d1ba      	bne.n	8000844 <__swsetup_r+0x30>
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	0792      	lsls	r2, r2, #30
 80008d2:	bf58      	it	pl
 80008d4:	6963      	ldrpl	r3, [r4, #20]
 80008d6:	60a3      	str	r3, [r4, #8]
 80008d8:	e7f2      	b.n	80008c0 <__swsetup_r+0xac>
 80008da:	2000      	movs	r0, #0
 80008dc:	e7f7      	b.n	80008ce <__swsetup_r+0xba>
 80008de:	bf00      	nop
 80008e0:	20000010 	.word	0x20000010
 80008e4:	0800103c 	.word	0x0800103c
 80008e8:	0800105c 	.word	0x0800105c
 80008ec:	0800101c 	.word	0x0800101c

080008f0 <__sflush_r>:
 80008f0:	898a      	ldrh	r2, [r1, #12]
 80008f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f6:	4605      	mov	r5, r0
 80008f8:	0710      	lsls	r0, r2, #28
 80008fa:	460c      	mov	r4, r1
 80008fc:	d458      	bmi.n	80009b0 <__sflush_r+0xc0>
 80008fe:	684b      	ldr	r3, [r1, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	dc05      	bgt.n	8000910 <__sflush_r+0x20>
 8000904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000906:	2b00      	cmp	r3, #0
 8000908:	dc02      	bgt.n	8000910 <__sflush_r+0x20>
 800090a:	2000      	movs	r0, #0
 800090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000912:	2e00      	cmp	r6, #0
 8000914:	d0f9      	beq.n	800090a <__sflush_r+0x1a>
 8000916:	2300      	movs	r3, #0
 8000918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800091c:	682f      	ldr	r7, [r5, #0]
 800091e:	6a21      	ldr	r1, [r4, #32]
 8000920:	602b      	str	r3, [r5, #0]
 8000922:	d032      	beq.n	800098a <__sflush_r+0x9a>
 8000924:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	075a      	lsls	r2, r3, #29
 800092a:	d505      	bpl.n	8000938 <__sflush_r+0x48>
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	1ac0      	subs	r0, r0, r3
 8000930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000932:	b10b      	cbz	r3, 8000938 <__sflush_r+0x48>
 8000934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000936:	1ac0      	subs	r0, r0, r3
 8000938:	2300      	movs	r3, #0
 800093a:	4602      	mov	r2, r0
 800093c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800093e:	6a21      	ldr	r1, [r4, #32]
 8000940:	4628      	mov	r0, r5
 8000942:	47b0      	blx	r6
 8000944:	1c43      	adds	r3, r0, #1
 8000946:	89a3      	ldrh	r3, [r4, #12]
 8000948:	d106      	bne.n	8000958 <__sflush_r+0x68>
 800094a:	6829      	ldr	r1, [r5, #0]
 800094c:	291d      	cmp	r1, #29
 800094e:	d848      	bhi.n	80009e2 <__sflush_r+0xf2>
 8000950:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <__sflush_r+0x108>)
 8000952:	40ca      	lsrs	r2, r1
 8000954:	07d6      	lsls	r6, r2, #31
 8000956:	d544      	bpl.n	80009e2 <__sflush_r+0xf2>
 8000958:	2200      	movs	r2, #0
 800095a:	6062      	str	r2, [r4, #4]
 800095c:	04d9      	lsls	r1, r3, #19
 800095e:	6922      	ldr	r2, [r4, #16]
 8000960:	6022      	str	r2, [r4, #0]
 8000962:	d504      	bpl.n	800096e <__sflush_r+0x7e>
 8000964:	1c42      	adds	r2, r0, #1
 8000966:	d101      	bne.n	800096c <__sflush_r+0x7c>
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	b903      	cbnz	r3, 800096e <__sflush_r+0x7e>
 800096c:	6560      	str	r0, [r4, #84]	; 0x54
 800096e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000970:	602f      	str	r7, [r5, #0]
 8000972:	2900      	cmp	r1, #0
 8000974:	d0c9      	beq.n	800090a <__sflush_r+0x1a>
 8000976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800097a:	4299      	cmp	r1, r3
 800097c:	d002      	beq.n	8000984 <__sflush_r+0x94>
 800097e:	4628      	mov	r0, r5
 8000980:	f000 f994 	bl	8000cac <_free_r>
 8000984:	2000      	movs	r0, #0
 8000986:	6360      	str	r0, [r4, #52]	; 0x34
 8000988:	e7c0      	b.n	800090c <__sflush_r+0x1c>
 800098a:	2301      	movs	r3, #1
 800098c:	4628      	mov	r0, r5
 800098e:	47b0      	blx	r6
 8000990:	1c41      	adds	r1, r0, #1
 8000992:	d1c8      	bne.n	8000926 <__sflush_r+0x36>
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0c5      	beq.n	8000926 <__sflush_r+0x36>
 800099a:	2b1d      	cmp	r3, #29
 800099c:	d001      	beq.n	80009a2 <__sflush_r+0xb2>
 800099e:	2b16      	cmp	r3, #22
 80009a0:	d101      	bne.n	80009a6 <__sflush_r+0xb6>
 80009a2:	602f      	str	r7, [r5, #0]
 80009a4:	e7b1      	b.n	800090a <__sflush_r+0x1a>
 80009a6:	89a3      	ldrh	r3, [r4, #12]
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	81a3      	strh	r3, [r4, #12]
 80009ae:	e7ad      	b.n	800090c <__sflush_r+0x1c>
 80009b0:	690f      	ldr	r7, [r1, #16]
 80009b2:	2f00      	cmp	r7, #0
 80009b4:	d0a9      	beq.n	800090a <__sflush_r+0x1a>
 80009b6:	0793      	lsls	r3, r2, #30
 80009b8:	680e      	ldr	r6, [r1, #0]
 80009ba:	bf08      	it	eq
 80009bc:	694b      	ldreq	r3, [r1, #20]
 80009be:	600f      	str	r7, [r1, #0]
 80009c0:	bf18      	it	ne
 80009c2:	2300      	movne	r3, #0
 80009c4:	eba6 0807 	sub.w	r8, r6, r7
 80009c8:	608b      	str	r3, [r1, #8]
 80009ca:	f1b8 0f00 	cmp.w	r8, #0
 80009ce:	dd9c      	ble.n	800090a <__sflush_r+0x1a>
 80009d0:	4643      	mov	r3, r8
 80009d2:	463a      	mov	r2, r7
 80009d4:	6a21      	ldr	r1, [r4, #32]
 80009d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009d8:	4628      	mov	r0, r5
 80009da:	47b0      	blx	r6
 80009dc:	2800      	cmp	r0, #0
 80009de:	dc06      	bgt.n	80009ee <__sflush_r+0xfe>
 80009e0:	89a3      	ldrh	r3, [r4, #12]
 80009e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e6:	81a3      	strh	r3, [r4, #12]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	e78e      	b.n	800090c <__sflush_r+0x1c>
 80009ee:	4407      	add	r7, r0
 80009f0:	eba8 0800 	sub.w	r8, r8, r0
 80009f4:	e7e9      	b.n	80009ca <__sflush_r+0xda>
 80009f6:	bf00      	nop
 80009f8:	20400001 	.word	0x20400001

080009fc <_fflush_r>:
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	690b      	ldr	r3, [r1, #16]
 8000a00:	4605      	mov	r5, r0
 8000a02:	460c      	mov	r4, r1
 8000a04:	b1db      	cbz	r3, 8000a3e <_fflush_r+0x42>
 8000a06:	b118      	cbz	r0, 8000a10 <_fflush_r+0x14>
 8000a08:	6983      	ldr	r3, [r0, #24]
 8000a0a:	b90b      	cbnz	r3, 8000a10 <_fflush_r+0x14>
 8000a0c:	f000 f860 	bl	8000ad0 <__sinit>
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <_fflush_r+0x48>)
 8000a12:	429c      	cmp	r4, r3
 8000a14:	d109      	bne.n	8000a2a <_fflush_r+0x2e>
 8000a16:	686c      	ldr	r4, [r5, #4]
 8000a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a1c:	b17b      	cbz	r3, 8000a3e <_fflush_r+0x42>
 8000a1e:	4621      	mov	r1, r4
 8000a20:	4628      	mov	r0, r5
 8000a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a26:	f7ff bf63 	b.w	80008f0 <__sflush_r>
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <_fflush_r+0x4c>)
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	d101      	bne.n	8000a34 <_fflush_r+0x38>
 8000a30:	68ac      	ldr	r4, [r5, #8]
 8000a32:	e7f1      	b.n	8000a18 <_fflush_r+0x1c>
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <_fflush_r+0x50>)
 8000a36:	429c      	cmp	r4, r3
 8000a38:	bf08      	it	eq
 8000a3a:	68ec      	ldreq	r4, [r5, #12]
 8000a3c:	e7ec      	b.n	8000a18 <_fflush_r+0x1c>
 8000a3e:	2000      	movs	r0, #0
 8000a40:	bd38      	pop	{r3, r4, r5, pc}
 8000a42:	bf00      	nop
 8000a44:	0800103c 	.word	0x0800103c
 8000a48:	0800105c 	.word	0x0800105c
 8000a4c:	0800101c 	.word	0x0800101c

08000a50 <std>:
 8000a50:	2300      	movs	r3, #0
 8000a52:	b510      	push	{r4, lr}
 8000a54:	4604      	mov	r4, r0
 8000a56:	e9c0 3300 	strd	r3, r3, [r0]
 8000a5a:	6083      	str	r3, [r0, #8]
 8000a5c:	8181      	strh	r1, [r0, #12]
 8000a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8000a60:	81c2      	strh	r2, [r0, #14]
 8000a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a66:	6183      	str	r3, [r0, #24]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	305c      	adds	r0, #92	; 0x5c
 8000a6e:	f7ff fe13 	bl	8000698 <memset>
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <std+0x38>)
 8000a74:	6263      	str	r3, [r4, #36]	; 0x24
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <std+0x3c>)
 8000a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <std+0x40>)
 8000a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <std+0x44>)
 8000a80:	6224      	str	r4, [r4, #32]
 8000a82:	6323      	str	r3, [r4, #48]	; 0x30
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	bf00      	nop
 8000a88:	08000e1d 	.word	0x08000e1d
 8000a8c:	08000e3f 	.word	0x08000e3f
 8000a90:	08000e77 	.word	0x08000e77
 8000a94:	08000e9b 	.word	0x08000e9b

08000a98 <_cleanup_r>:
 8000a98:	4901      	ldr	r1, [pc, #4]	; (8000aa0 <_cleanup_r+0x8>)
 8000a9a:	f000 b885 	b.w	8000ba8 <_fwalk_reent>
 8000a9e:	bf00      	nop
 8000aa0:	080009fd 	.word	0x080009fd

08000aa4 <__sfmoreglue>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	1e4a      	subs	r2, r1, #1
 8000aa8:	2568      	movs	r5, #104	; 0x68
 8000aaa:	4355      	muls	r5, r2
 8000aac:	460e      	mov	r6, r1
 8000aae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ab2:	f000 f949 	bl	8000d48 <_malloc_r>
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	b140      	cbz	r0, 8000acc <__sfmoreglue+0x28>
 8000aba:	2100      	movs	r1, #0
 8000abc:	e9c0 1600 	strd	r1, r6, [r0]
 8000ac0:	300c      	adds	r0, #12
 8000ac2:	60a0      	str	r0, [r4, #8]
 8000ac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ac8:	f7ff fde6 	bl	8000698 <memset>
 8000acc:	4620      	mov	r0, r4
 8000ace:	bd70      	pop	{r4, r5, r6, pc}

08000ad0 <__sinit>:
 8000ad0:	6983      	ldr	r3, [r0, #24]
 8000ad2:	b510      	push	{r4, lr}
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	bb33      	cbnz	r3, 8000b26 <__sinit+0x56>
 8000ad8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000adc:	6503      	str	r3, [r0, #80]	; 0x50
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <__sinit+0x58>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <__sinit+0x5c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6282      	str	r2, [r0, #40]	; 0x28
 8000ae6:	4298      	cmp	r0, r3
 8000ae8:	bf04      	itt	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	6183      	streq	r3, [r0, #24]
 8000aee:	f000 f81f 	bl	8000b30 <__sfp>
 8000af2:	6060      	str	r0, [r4, #4]
 8000af4:	4620      	mov	r0, r4
 8000af6:	f000 f81b 	bl	8000b30 <__sfp>
 8000afa:	60a0      	str	r0, [r4, #8]
 8000afc:	4620      	mov	r0, r4
 8000afe:	f000 f817 	bl	8000b30 <__sfp>
 8000b02:	2200      	movs	r2, #0
 8000b04:	60e0      	str	r0, [r4, #12]
 8000b06:	2104      	movs	r1, #4
 8000b08:	6860      	ldr	r0, [r4, #4]
 8000b0a:	f7ff ffa1 	bl	8000a50 <std>
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2109      	movs	r1, #9
 8000b12:	68a0      	ldr	r0, [r4, #8]
 8000b14:	f7ff ff9c 	bl	8000a50 <std>
 8000b18:	2202      	movs	r2, #2
 8000b1a:	2112      	movs	r1, #18
 8000b1c:	68e0      	ldr	r0, [r4, #12]
 8000b1e:	f7ff ff97 	bl	8000a50 <std>
 8000b22:	2301      	movs	r3, #1
 8000b24:	61a3      	str	r3, [r4, #24]
 8000b26:	bd10      	pop	{r4, pc}
 8000b28:	08001018 	.word	0x08001018
 8000b2c:	08000a99 	.word	0x08000a99

08000b30 <__sfp>:
 8000b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <__sfp+0x70>)
 8000b34:	681e      	ldr	r6, [r3, #0]
 8000b36:	69b3      	ldr	r3, [r6, #24]
 8000b38:	4607      	mov	r7, r0
 8000b3a:	b913      	cbnz	r3, 8000b42 <__sfp+0x12>
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	f7ff ffc7 	bl	8000ad0 <__sinit>
 8000b42:	3648      	adds	r6, #72	; 0x48
 8000b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	d503      	bpl.n	8000b54 <__sfp+0x24>
 8000b4c:	6833      	ldr	r3, [r6, #0]
 8000b4e:	b133      	cbz	r3, 8000b5e <__sfp+0x2e>
 8000b50:	6836      	ldr	r6, [r6, #0]
 8000b52:	e7f7      	b.n	8000b44 <__sfp+0x14>
 8000b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b58:	b16d      	cbz	r5, 8000b76 <__sfp+0x46>
 8000b5a:	3468      	adds	r4, #104	; 0x68
 8000b5c:	e7f4      	b.n	8000b48 <__sfp+0x18>
 8000b5e:	2104      	movs	r1, #4
 8000b60:	4638      	mov	r0, r7
 8000b62:	f7ff ff9f 	bl	8000aa4 <__sfmoreglue>
 8000b66:	6030      	str	r0, [r6, #0]
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d1f1      	bne.n	8000b50 <__sfp+0x20>
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4604      	mov	r4, r0
 8000b72:	4620      	mov	r0, r4
 8000b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <__sfp+0x74>)
 8000b78:	6665      	str	r5, [r4, #100]	; 0x64
 8000b7a:	e9c4 5500 	strd	r5, r5, [r4]
 8000b7e:	60a5      	str	r5, [r4, #8]
 8000b80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000b84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000b88:	2208      	movs	r2, #8
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b90:	f7ff fd82 	bl	8000698 <memset>
 8000b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b9c:	e7e9      	b.n	8000b72 <__sfp+0x42>
 8000b9e:	bf00      	nop
 8000ba0:	08001018 	.word	0x08001018
 8000ba4:	ffff0001 	.word	0xffff0001

08000ba8 <_fwalk_reent>:
 8000ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bac:	4680      	mov	r8, r0
 8000bae:	4689      	mov	r9, r1
 8000bb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b914      	cbnz	r4, 8000bbe <_fwalk_reent+0x16>
 8000bb8:	4630      	mov	r0, r6
 8000bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000bc2:	3f01      	subs	r7, #1
 8000bc4:	d501      	bpl.n	8000bca <_fwalk_reent+0x22>
 8000bc6:	6824      	ldr	r4, [r4, #0]
 8000bc8:	e7f5      	b.n	8000bb6 <_fwalk_reent+0xe>
 8000bca:	89ab      	ldrh	r3, [r5, #12]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d907      	bls.n	8000be0 <_fwalk_reent+0x38>
 8000bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	d003      	beq.n	8000be0 <_fwalk_reent+0x38>
 8000bd8:	4629      	mov	r1, r5
 8000bda:	4640      	mov	r0, r8
 8000bdc:	47c8      	blx	r9
 8000bde:	4306      	orrs	r6, r0
 8000be0:	3568      	adds	r5, #104	; 0x68
 8000be2:	e7ee      	b.n	8000bc2 <_fwalk_reent+0x1a>

08000be4 <__swhatbuf_r>:
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	460e      	mov	r6, r1
 8000be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bec:	2900      	cmp	r1, #0
 8000bee:	b096      	sub	sp, #88	; 0x58
 8000bf0:	4614      	mov	r4, r2
 8000bf2:	461d      	mov	r5, r3
 8000bf4:	da07      	bge.n	8000c06 <__swhatbuf_r+0x22>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	602b      	str	r3, [r5, #0]
 8000bfa:	89b3      	ldrh	r3, [r6, #12]
 8000bfc:	061a      	lsls	r2, r3, #24
 8000bfe:	d410      	bmi.n	8000c22 <__swhatbuf_r+0x3e>
 8000c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c04:	e00e      	b.n	8000c24 <__swhatbuf_r+0x40>
 8000c06:	466a      	mov	r2, sp
 8000c08:	f000 f96e 	bl	8000ee8 <_fstat_r>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	dbf2      	blt.n	8000bf6 <__swhatbuf_r+0x12>
 8000c10:	9a01      	ldr	r2, [sp, #4]
 8000c12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c1a:	425a      	negs	r2, r3
 8000c1c:	415a      	adcs	r2, r3
 8000c1e:	602a      	str	r2, [r5, #0]
 8000c20:	e7ee      	b.n	8000c00 <__swhatbuf_r+0x1c>
 8000c22:	2340      	movs	r3, #64	; 0x40
 8000c24:	2000      	movs	r0, #0
 8000c26:	6023      	str	r3, [r4, #0]
 8000c28:	b016      	add	sp, #88	; 0x58
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}

08000c2c <__smakebuf_r>:
 8000c2c:	898b      	ldrh	r3, [r1, #12]
 8000c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c30:	079d      	lsls	r5, r3, #30
 8000c32:	4606      	mov	r6, r0
 8000c34:	460c      	mov	r4, r1
 8000c36:	d507      	bpl.n	8000c48 <__smakebuf_r+0x1c>
 8000c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c3c:	6023      	str	r3, [r4, #0]
 8000c3e:	6123      	str	r3, [r4, #16]
 8000c40:	2301      	movs	r3, #1
 8000c42:	6163      	str	r3, [r4, #20]
 8000c44:	b002      	add	sp, #8
 8000c46:	bd70      	pop	{r4, r5, r6, pc}
 8000c48:	ab01      	add	r3, sp, #4
 8000c4a:	466a      	mov	r2, sp
 8000c4c:	f7ff ffca 	bl	8000be4 <__swhatbuf_r>
 8000c50:	9900      	ldr	r1, [sp, #0]
 8000c52:	4605      	mov	r5, r0
 8000c54:	4630      	mov	r0, r6
 8000c56:	f000 f877 	bl	8000d48 <_malloc_r>
 8000c5a:	b948      	cbnz	r0, 8000c70 <__smakebuf_r+0x44>
 8000c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c60:	059a      	lsls	r2, r3, #22
 8000c62:	d4ef      	bmi.n	8000c44 <__smakebuf_r+0x18>
 8000c64:	f023 0303 	bic.w	r3, r3, #3
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	81a3      	strh	r3, [r4, #12]
 8000c6e:	e7e3      	b.n	8000c38 <__smakebuf_r+0xc>
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <__smakebuf_r+0x7c>)
 8000c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c74:	89a3      	ldrh	r3, [r4, #12]
 8000c76:	6020      	str	r0, [r4, #0]
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	81a3      	strh	r3, [r4, #12]
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	6163      	str	r3, [r4, #20]
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	6120      	str	r0, [r4, #16]
 8000c86:	b15b      	cbz	r3, 8000ca0 <__smakebuf_r+0x74>
 8000c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	f000 f93d 	bl	8000f0c <_isatty_r>
 8000c92:	b128      	cbz	r0, 8000ca0 <__smakebuf_r+0x74>
 8000c94:	89a3      	ldrh	r3, [r4, #12]
 8000c96:	f023 0303 	bic.w	r3, r3, #3
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	81a3      	strh	r3, [r4, #12]
 8000ca0:	89a3      	ldrh	r3, [r4, #12]
 8000ca2:	431d      	orrs	r5, r3
 8000ca4:	81a5      	strh	r5, [r4, #12]
 8000ca6:	e7cd      	b.n	8000c44 <__smakebuf_r+0x18>
 8000ca8:	08000a99 	.word	0x08000a99

08000cac <_free_r>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4605      	mov	r5, r0
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d045      	beq.n	8000d40 <_free_r+0x94>
 8000cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cb8:	1f0c      	subs	r4, r1, #4
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bfb8      	it	lt
 8000cbe:	18e4      	addlt	r4, r4, r3
 8000cc0:	f000 f946 	bl	8000f50 <__malloc_lock>
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <_free_r+0x98>)
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	4610      	mov	r0, r2
 8000cca:	b933      	cbnz	r3, 8000cda <_free_r+0x2e>
 8000ccc:	6063      	str	r3, [r4, #4]
 8000cce:	6014      	str	r4, [r2, #0]
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd6:	f000 b93c 	b.w	8000f52 <__malloc_unlock>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d90c      	bls.n	8000cf8 <_free_r+0x4c>
 8000cde:	6821      	ldr	r1, [r4, #0]
 8000ce0:	1862      	adds	r2, r4, r1
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	bf04      	itt	eq
 8000ce6:	681a      	ldreq	r2, [r3, #0]
 8000ce8:	685b      	ldreq	r3, [r3, #4]
 8000cea:	6063      	str	r3, [r4, #4]
 8000cec:	bf04      	itt	eq
 8000cee:	1852      	addeq	r2, r2, r1
 8000cf0:	6022      	streq	r2, [r4, #0]
 8000cf2:	6004      	str	r4, [r0, #0]
 8000cf4:	e7ec      	b.n	8000cd0 <_free_r+0x24>
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	b10a      	cbz	r2, 8000d00 <_free_r+0x54>
 8000cfc:	42a2      	cmp	r2, r4
 8000cfe:	d9fa      	bls.n	8000cf6 <_free_r+0x4a>
 8000d00:	6819      	ldr	r1, [r3, #0]
 8000d02:	1858      	adds	r0, r3, r1
 8000d04:	42a0      	cmp	r0, r4
 8000d06:	d10b      	bne.n	8000d20 <_free_r+0x74>
 8000d08:	6820      	ldr	r0, [r4, #0]
 8000d0a:	4401      	add	r1, r0
 8000d0c:	1858      	adds	r0, r3, r1
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	6019      	str	r1, [r3, #0]
 8000d12:	d1dd      	bne.n	8000cd0 <_free_r+0x24>
 8000d14:	6810      	ldr	r0, [r2, #0]
 8000d16:	6852      	ldr	r2, [r2, #4]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	4401      	add	r1, r0
 8000d1c:	6019      	str	r1, [r3, #0]
 8000d1e:	e7d7      	b.n	8000cd0 <_free_r+0x24>
 8000d20:	d902      	bls.n	8000d28 <_free_r+0x7c>
 8000d22:	230c      	movs	r3, #12
 8000d24:	602b      	str	r3, [r5, #0]
 8000d26:	e7d3      	b.n	8000cd0 <_free_r+0x24>
 8000d28:	6820      	ldr	r0, [r4, #0]
 8000d2a:	1821      	adds	r1, r4, r0
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	bf04      	itt	eq
 8000d30:	6811      	ldreq	r1, [r2, #0]
 8000d32:	6852      	ldreq	r2, [r2, #4]
 8000d34:	6062      	str	r2, [r4, #4]
 8000d36:	bf04      	itt	eq
 8000d38:	1809      	addeq	r1, r1, r0
 8000d3a:	6021      	streq	r1, [r4, #0]
 8000d3c:	605c      	str	r4, [r3, #4]
 8000d3e:	e7c7      	b.n	8000cd0 <_free_r+0x24>
 8000d40:	bd38      	pop	{r3, r4, r5, pc}
 8000d42:	bf00      	nop
 8000d44:	2000009c 	.word	0x2000009c

08000d48 <_malloc_r>:
 8000d48:	b570      	push	{r4, r5, r6, lr}
 8000d4a:	1ccd      	adds	r5, r1, #3
 8000d4c:	f025 0503 	bic.w	r5, r5, #3
 8000d50:	3508      	adds	r5, #8
 8000d52:	2d0c      	cmp	r5, #12
 8000d54:	bf38      	it	cc
 8000d56:	250c      	movcc	r5, #12
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	4606      	mov	r6, r0
 8000d5c:	db01      	blt.n	8000d62 <_malloc_r+0x1a>
 8000d5e:	42a9      	cmp	r1, r5
 8000d60:	d903      	bls.n	8000d6a <_malloc_r+0x22>
 8000d62:	230c      	movs	r3, #12
 8000d64:	6033      	str	r3, [r6, #0]
 8000d66:	2000      	movs	r0, #0
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
 8000d6a:	f000 f8f1 	bl	8000f50 <__malloc_lock>
 8000d6e:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <_malloc_r+0xac>)
 8000d70:	6814      	ldr	r4, [r2, #0]
 8000d72:	4621      	mov	r1, r4
 8000d74:	b991      	cbnz	r1, 8000d9c <_malloc_r+0x54>
 8000d76:	4c20      	ldr	r4, [pc, #128]	; (8000df8 <_malloc_r+0xb0>)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	b91b      	cbnz	r3, 8000d84 <_malloc_r+0x3c>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	f000 f83d 	bl	8000dfc <_sbrk_r>
 8000d82:	6020      	str	r0, [r4, #0]
 8000d84:	4629      	mov	r1, r5
 8000d86:	4630      	mov	r0, r6
 8000d88:	f000 f838 	bl	8000dfc <_sbrk_r>
 8000d8c:	1c43      	adds	r3, r0, #1
 8000d8e:	d124      	bne.n	8000dda <_malloc_r+0x92>
 8000d90:	230c      	movs	r3, #12
 8000d92:	6033      	str	r3, [r6, #0]
 8000d94:	4630      	mov	r0, r6
 8000d96:	f000 f8dc 	bl	8000f52 <__malloc_unlock>
 8000d9a:	e7e4      	b.n	8000d66 <_malloc_r+0x1e>
 8000d9c:	680b      	ldr	r3, [r1, #0]
 8000d9e:	1b5b      	subs	r3, r3, r5
 8000da0:	d418      	bmi.n	8000dd4 <_malloc_r+0x8c>
 8000da2:	2b0b      	cmp	r3, #11
 8000da4:	d90f      	bls.n	8000dc6 <_malloc_r+0x7e>
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	50cd      	str	r5, [r1, r3]
 8000daa:	18cc      	adds	r4, r1, r3
 8000dac:	4630      	mov	r0, r6
 8000dae:	f000 f8d0 	bl	8000f52 <__malloc_unlock>
 8000db2:	f104 000b 	add.w	r0, r4, #11
 8000db6:	1d23      	adds	r3, r4, #4
 8000db8:	f020 0007 	bic.w	r0, r0, #7
 8000dbc:	1ac3      	subs	r3, r0, r3
 8000dbe:	d0d3      	beq.n	8000d68 <_malloc_r+0x20>
 8000dc0:	425a      	negs	r2, r3
 8000dc2:	50e2      	str	r2, [r4, r3]
 8000dc4:	e7d0      	b.n	8000d68 <_malloc_r+0x20>
 8000dc6:	428c      	cmp	r4, r1
 8000dc8:	684b      	ldr	r3, [r1, #4]
 8000dca:	bf16      	itet	ne
 8000dcc:	6063      	strne	r3, [r4, #4]
 8000dce:	6013      	streq	r3, [r2, #0]
 8000dd0:	460c      	movne	r4, r1
 8000dd2:	e7eb      	b.n	8000dac <_malloc_r+0x64>
 8000dd4:	460c      	mov	r4, r1
 8000dd6:	6849      	ldr	r1, [r1, #4]
 8000dd8:	e7cc      	b.n	8000d74 <_malloc_r+0x2c>
 8000dda:	1cc4      	adds	r4, r0, #3
 8000ddc:	f024 0403 	bic.w	r4, r4, #3
 8000de0:	42a0      	cmp	r0, r4
 8000de2:	d005      	beq.n	8000df0 <_malloc_r+0xa8>
 8000de4:	1a21      	subs	r1, r4, r0
 8000de6:	4630      	mov	r0, r6
 8000de8:	f000 f808 	bl	8000dfc <_sbrk_r>
 8000dec:	3001      	adds	r0, #1
 8000dee:	d0cf      	beq.n	8000d90 <_malloc_r+0x48>
 8000df0:	6025      	str	r5, [r4, #0]
 8000df2:	e7db      	b.n	8000dac <_malloc_r+0x64>
 8000df4:	2000009c 	.word	0x2000009c
 8000df8:	200000a0 	.word	0x200000a0

08000dfc <_sbrk_r>:
 8000dfc:	b538      	push	{r3, r4, r5, lr}
 8000dfe:	4c06      	ldr	r4, [pc, #24]	; (8000e18 <_sbrk_r+0x1c>)
 8000e00:	2300      	movs	r3, #0
 8000e02:	4605      	mov	r5, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	6023      	str	r3, [r4, #0]
 8000e08:	f7ff fbc6 	bl	8000598 <_sbrk>
 8000e0c:	1c43      	adds	r3, r0, #1
 8000e0e:	d102      	bne.n	8000e16 <_sbrk_r+0x1a>
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	b103      	cbz	r3, 8000e16 <_sbrk_r+0x1a>
 8000e14:	602b      	str	r3, [r5, #0]
 8000e16:	bd38      	pop	{r3, r4, r5, pc}
 8000e18:	200000b4 	.word	0x200000b4

08000e1c <__sread>:
 8000e1c:	b510      	push	{r4, lr}
 8000e1e:	460c      	mov	r4, r1
 8000e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e24:	f000 f896 	bl	8000f54 <_read_r>
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	bfab      	itete	ge
 8000e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8000e30:	181b      	addge	r3, r3, r0
 8000e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e36:	bfac      	ite	ge
 8000e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e3a:	81a3      	strhlt	r3, [r4, #12]
 8000e3c:	bd10      	pop	{r4, pc}

08000e3e <__swrite>:
 8000e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e42:	461f      	mov	r7, r3
 8000e44:	898b      	ldrh	r3, [r1, #12]
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	4605      	mov	r5, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	4616      	mov	r6, r2
 8000e4e:	d505      	bpl.n	8000e5c <__swrite+0x1e>
 8000e50:	2302      	movs	r3, #2
 8000e52:	2200      	movs	r2, #0
 8000e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e58:	f000 f868 	bl	8000f2c <_lseek_r>
 8000e5c:	89a3      	ldrh	r3, [r4, #12]
 8000e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e66:	81a3      	strh	r3, [r4, #12]
 8000e68:	4632      	mov	r2, r6
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e72:	f000 b817 	b.w	8000ea4 <_write_r>

08000e76 <__sseek>:
 8000e76:	b510      	push	{r4, lr}
 8000e78:	460c      	mov	r4, r1
 8000e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e7e:	f000 f855 	bl	8000f2c <_lseek_r>
 8000e82:	1c43      	adds	r3, r0, #1
 8000e84:	89a3      	ldrh	r3, [r4, #12]
 8000e86:	bf15      	itete	ne
 8000e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e92:	81a3      	strheq	r3, [r4, #12]
 8000e94:	bf18      	it	ne
 8000e96:	81a3      	strhne	r3, [r4, #12]
 8000e98:	bd10      	pop	{r4, pc}

08000e9a <__sclose>:
 8000e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e9e:	f000 b813 	b.w	8000ec8 <_close_r>
	...

08000ea4 <_write_r>:
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4c07      	ldr	r4, [pc, #28]	; (8000ec4 <_write_r+0x20>)
 8000ea8:	4605      	mov	r5, r0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	4611      	mov	r1, r2
 8000eae:	2200      	movs	r2, #0
 8000eb0:	6022      	str	r2, [r4, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f7ff fb1f 	bl	80004f6 <_write>
 8000eb8:	1c43      	adds	r3, r0, #1
 8000eba:	d102      	bne.n	8000ec2 <_write_r+0x1e>
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	b103      	cbz	r3, 8000ec2 <_write_r+0x1e>
 8000ec0:	602b      	str	r3, [r5, #0]
 8000ec2:	bd38      	pop	{r3, r4, r5, pc}
 8000ec4:	200000b4 	.word	0x200000b4

08000ec8 <_close_r>:
 8000ec8:	b538      	push	{r3, r4, r5, lr}
 8000eca:	4c06      	ldr	r4, [pc, #24]	; (8000ee4 <_close_r+0x1c>)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4605      	mov	r5, r0
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	6023      	str	r3, [r4, #0]
 8000ed4:	f7ff fb2b 	bl	800052e <_close>
 8000ed8:	1c43      	adds	r3, r0, #1
 8000eda:	d102      	bne.n	8000ee2 <_close_r+0x1a>
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	b103      	cbz	r3, 8000ee2 <_close_r+0x1a>
 8000ee0:	602b      	str	r3, [r5, #0]
 8000ee2:	bd38      	pop	{r3, r4, r5, pc}
 8000ee4:	200000b4 	.word	0x200000b4

08000ee8 <_fstat_r>:
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	4c07      	ldr	r4, [pc, #28]	; (8000f08 <_fstat_r+0x20>)
 8000eec:	2300      	movs	r3, #0
 8000eee:	4605      	mov	r5, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	f7ff fb26 	bl	8000546 <_fstat>
 8000efa:	1c43      	adds	r3, r0, #1
 8000efc:	d102      	bne.n	8000f04 <_fstat_r+0x1c>
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	b103      	cbz	r3, 8000f04 <_fstat_r+0x1c>
 8000f02:	602b      	str	r3, [r5, #0]
 8000f04:	bd38      	pop	{r3, r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	200000b4 	.word	0x200000b4

08000f0c <_isatty_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4c06      	ldr	r4, [pc, #24]	; (8000f28 <_isatty_r+0x1c>)
 8000f10:	2300      	movs	r3, #0
 8000f12:	4605      	mov	r5, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	f7ff fb25 	bl	8000566 <_isatty>
 8000f1c:	1c43      	adds	r3, r0, #1
 8000f1e:	d102      	bne.n	8000f26 <_isatty_r+0x1a>
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	b103      	cbz	r3, 8000f26 <_isatty_r+0x1a>
 8000f24:	602b      	str	r3, [r5, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
 8000f28:	200000b4 	.word	0x200000b4

08000f2c <_lseek_r>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4c07      	ldr	r4, [pc, #28]	; (8000f4c <_lseek_r+0x20>)
 8000f30:	4605      	mov	r5, r0
 8000f32:	4608      	mov	r0, r1
 8000f34:	4611      	mov	r1, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	6022      	str	r2, [r4, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	f7ff fb1e 	bl	800057c <_lseek>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	d102      	bne.n	8000f4a <_lseek_r+0x1e>
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	b103      	cbz	r3, 8000f4a <_lseek_r+0x1e>
 8000f48:	602b      	str	r3, [r5, #0]
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	200000b4 	.word	0x200000b4

08000f50 <__malloc_lock>:
 8000f50:	4770      	bx	lr

08000f52 <__malloc_unlock>:
 8000f52:	4770      	bx	lr

08000f54 <_read_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4c07      	ldr	r4, [pc, #28]	; (8000f74 <_read_r+0x20>)
 8000f58:	4605      	mov	r5, r0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	6022      	str	r2, [r4, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f7ff faaa 	bl	80004bc <_read>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_read_r+0x1e>
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_read_r+0x1e>
 8000f70:	602b      	str	r3, [r5, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	200000b4 	.word	0x200000b4

08000f78 <_init>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr

08000f84 <_fini>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr
