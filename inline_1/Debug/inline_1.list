
inline_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000128  080001c0  080001c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e8  080002f8  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e8  080002e8  000102f8  2**0
                  CONTENTS
  4 .ARM          00000000  080002e8  080002e8  000102f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e8  080002f8  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080002e8  080002e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080002f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080002f8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000c5  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000077  00000000  00000000  000103ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000104b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000a77  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000000cf  00000000  00000000  00010f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002d4d  00000000  00000000  00011026  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00013d73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00013df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000000 	.word	0x20000000
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080002cc 	.word	0x080002cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000004 	.word	0x20000004
 80001fc:	080002cc 	.word	0x080002cc

08000200 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000200:	b480      	push	{r7}
 8000202:	b087      	sub	sp, #28
 8000204:	af00      	add	r7, sp, #0
	__asm volatile("LDR R1, [R2]");
	__asm volatile("ADD R0, R0, R1");
	__asm volatile("STR R0, [R2]");
#endif

	int val = 50;
 8000206:	2332      	movs	r3, #50	; 0x32
 8000208:	617b      	str	r3, [r7, #20]
	__asm volatile("MOV R0, %0": : "r"(val));
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	4618      	mov	r0, r3

	int control_reg;
	/*Read CONTROL register to control_reg */
	__asm volatile("MRS %0, CONTROL": "=r"(control_reg) );
 800020e:	f3ef 8314 	mrs	r3, CONTROL
 8000212:	613b      	str	r3, [r7, #16]

	int var1 = 10, var2;
 8000214:	230a      	movs	r3, #10
 8000216:	60fb      	str	r3, [r7, #12]

	__asm ("MOV %0,%1": "=r"(var2): "r"(var1));  //Copy the content of 'C' variable var1 to var2
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	461b      	mov	r3, r3
 800021c:	60bb      	str	r3, [r7, #8]

	int p1, *p2;

	p2 = (int*)0x20000008;
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <main+0x2c>)
 8000220:	607b      	str	r3, [r7, #4]

	__asm volatile("LDR %0, [%1]": "=r"(p1): "r"(p2)); //p1 = *p2
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	603b      	str	r3, [r7, #0]


	for(;;);
 8000228:	e7fe      	b.n	8000228 <main+0x28>
 800022a:	bf00      	nop
 800022c:	20000008 	.word	0x20000008

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 8000236:	490e      	ldr	r1, [pc, #56]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000238:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800023c:	e002      	b.n	8000244 <LoopCopyDataInit>

0800023e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000242:	3304      	adds	r3, #4

08000244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000248:	d3f9      	bcc.n	800023e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024a:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 800024c:	4c0b      	ldr	r4, [pc, #44]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000250:	e001      	b.n	8000256 <LoopFillZerobss>

08000252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000254:	3204      	adds	r2, #4

08000256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000258:	d3fb      	bcc.n	8000252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800025e:	f000 f811 	bl	8000284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ffcd 	bl	8000200 <main>

08000266 <LoopForever>:

LoopForever:
    b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000274:	080002f8 	.word	0x080002f8
  ldr r2, =_sbss
 8000278:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800027c:	20000020 	.word	0x20000020

08000280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_2_IRQHandler>
	...

08000284 <__libc_init_array>:
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	4e0d      	ldr	r6, [pc, #52]	; (80002bc <__libc_init_array+0x38>)
 8000288:	4c0d      	ldr	r4, [pc, #52]	; (80002c0 <__libc_init_array+0x3c>)
 800028a:	1ba4      	subs	r4, r4, r6
 800028c:	10a4      	asrs	r4, r4, #2
 800028e:	2500      	movs	r5, #0
 8000290:	42a5      	cmp	r5, r4
 8000292:	d109      	bne.n	80002a8 <__libc_init_array+0x24>
 8000294:	4e0b      	ldr	r6, [pc, #44]	; (80002c4 <__libc_init_array+0x40>)
 8000296:	4c0c      	ldr	r4, [pc, #48]	; (80002c8 <__libc_init_array+0x44>)
 8000298:	f000 f818 	bl	80002cc <_init>
 800029c:	1ba4      	subs	r4, r4, r6
 800029e:	10a4      	asrs	r4, r4, #2
 80002a0:	2500      	movs	r5, #0
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d105      	bne.n	80002b2 <__libc_init_array+0x2e>
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ac:	4798      	blx	r3
 80002ae:	3501      	adds	r5, #1
 80002b0:	e7ee      	b.n	8000290 <__libc_init_array+0xc>
 80002b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002b6:	4798      	blx	r3
 80002b8:	3501      	adds	r5, #1
 80002ba:	e7f2      	b.n	80002a2 <__libc_init_array+0x1e>
 80002bc:	080002e8 	.word	0x080002e8
 80002c0:	080002e8 	.word	0x080002e8
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002ec 	.word	0x080002ec

080002cc <_init>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr

080002d8 <_fini>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	bf00      	nop
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr
 80002e4:	0000      	movs	r0, r0
	...
