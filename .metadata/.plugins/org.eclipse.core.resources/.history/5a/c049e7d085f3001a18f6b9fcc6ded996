/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>
#include "main.h"



void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack);
void init_systick_timer(uint32_t tick_hz);

void init_tasks_stack(void);


uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};


int main(void)
{
	init_scheduler_stack(SCHED_STACK_START);

	init_tasks_stack();

	init_systick_timer(TICK_HZ);

	for(;;);
}

void task1_handler(void)
{
	while(1)
	{
		printf("This is task1\n");
	}
}

void task2_handler(void)
{
	while(1)
	{
		printf("This is task2\n");
	}
}

void task3_handler(void)
{
	while(1)
	{
		printf("This is task3\n");
	}
}

void task4_handler(void)
{
	while(1)
	{
		printf("This is task4\n");
	}
}

void init_systick_timer(uint32_t tick_hz)
{

	uint32_t *pSRVR = (uint32_t*)0xE000E014;  //Systick Reload Value Register SYST_CVR register
	uint32_t *pSCSR = (uint32_t*)0xE000E010;

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) -1;

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);

	//load the value in to SVR
	*pSRVR |= count_value;

	//more settings
	*pSCSR |= ( 1 << 1);  //Enables Systick exception request:
	*pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source


	//enable the systick
	*pSCSR |= ( 1 << 0); //enables the counter

}


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack)	 :	 );
	__asm volatile("BX LR");

}


void init_tasks_stack(void)
{

}


void SysTick_Handler(void)
{

}
