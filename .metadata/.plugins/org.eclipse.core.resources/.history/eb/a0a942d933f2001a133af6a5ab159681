/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/*
 * Write a program to add, subtract, multiply, and divide 2 operands using SVC handler and return the result to the
 * thread mode code and print the result. Thread mode code should pass 2 operands via the stack frame.
 *
 * Use the Next SVC numbers to decide the operation
 * 36	Addition
 * 37	Subtraction
 * 38	Multiplication
 * 39	Division
 */

#include <stdio.h>
#include <stdint.h>

/*Variable to see when the ISR SVC Handler esta activa */
int8_t SVC_Status = 0;

void SVC_Handler_c(uint32_t *pBaseStackFrame);

int32_t add_numbers(int32_t x, int32_t y)
{
	/*Variable to store the result of the mathematical operations  */
	int32_t res;

	__asm volatile("SVC #36");

	__asm volatile("MOV %0,R0": "=r"(res) ::);

	return res;

}

int32_t sub_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #37");

	__asm volatile("MOV %0, R0": "=r"(res) ::);

	return res;
}

int32_t mul_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #38");

	__asm volatile("MOV %0, R0": "=r"(res)::);

	return res;
}

int32_t div_numbers(int32_t x, int32_t y)
{
	int32_t res;

	__asm volatile("SVC #39");

	__asm volatile("MOV %0, R0": "=r"(res)  ::);

	return res;
}


int main(void)
{
	int32_t res;

	res = add_numbers(40, -90);
	printf("The result of Add is %ld", res);

	res = sub_numbers(40, -90);
	printf("The result of Substraction is %ld", res);


	res = mul_numbers(40, -90);
	printf("The result of Multiplication is %ld", res);

	res = div_numbers(40, -90);
	printf("The result of division is %ld", res);



	for(;;);
}


__attribute__( (naked) ) void SVC_Handler(void)
{
	__asm ("MRS r0, MSP");
	__asm ("B SVC_Handler_c");
}

void SVC_Handler_c(uint32_t *pBaseOfStackFrame)
{
	SVC_Status = 1;

	int32_t arg0, arg1, res;

	uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];

	pReturn_addr -= 2;

	uint8_t svc_number = *pReturn_addr;

	arg0 = pBaseOfStackFrame[0];
	arg1 = pBaseOfStackFrame[1];

	switch(svc_number)
	{
	case 36:
		res = arg0 + arg1;
		break;
	case 37:
		res = arg0 - arg1;
		break;
	case 38:
		res = arg0 * arg1;
		break;
	case 39:
		res = arg0 / arg1;
		break;
	default:
		printf("invalid svc code\n");
		break;
	}


	pBaseOfStackFrame[0] = res;

	SVC_Status = 0;

}


