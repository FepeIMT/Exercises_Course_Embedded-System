
bit_banding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000130  080001c0  080001c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f0  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f0  080002f0  00010300  2**0
                  CONTENTS
  4 .ARM          00000000  080002f0  080002f0  00010300  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f0  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000300  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000300  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000e4  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000008f  00000000  00000000  00010414  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  000104a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000104f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f0e  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000040b  00000000  00000000  0001142e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b25  00000000  00000000  00011839  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001535e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000153dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000000 	.word	0x20000000
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080002d4 	.word	0x080002d4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000004 	.word	0x20000004
 80001fc:	080002d4 	.word	0x080002d4

08000200 <main>:

#define ALIAS_BASE 		0x22000000U
#define BITBAND_BASE 	0x20000000U

int main(void)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0

	uint8_t *ptr = (uint8_t*)0x20000200;
 8000206:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <main+0x30>)
 8000208:	607b      	str	r3, [r7, #4]

	*ptr = 0xff;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	22ff      	movs	r2, #255	; 0xff
 800020e:	701a      	strb	r2, [r3, #0]

	//normal method
	//clearing 7th bit position
	*ptr &= ~(1 << 7);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000218:	b2da      	uxtb	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	701a      	strb	r2, [r3, #0]

	//reset to 0xff
	*ptr = 0xff;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	22ff      	movs	r2, #255	; 0xff
 8000222:	701a      	strb	r2, [r3, #0]

	//bit band method
	uint8_t *alias_addr = (uint8_t*) (ALIAS_BASE+(32*(0x20000200-BITBAND_BASE)) + 6 * 4);
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <main+0x34>)
 8000226:	603b      	str	r3, [r7, #0]

	//Clearing 7th bit of address 0x20000200
	*alias_addr = 0;
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]



	for(;;);
 800022e:	e7fe      	b.n	800022e <main+0x2e>
 8000230:	20000200 	.word	0x20000200
 8000234:	22004018 	.word	0x22004018

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 800023e:	490e      	ldr	r1, [pc, #56]	; (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <LoopForever+0xe>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000244:	e002      	b.n	800024c <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024a:	3304      	adds	r3, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800024c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000250:	d3f9      	bcc.n	8000246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000254:	4c0b      	ldr	r4, [pc, #44]	; (8000284 <LoopForever+0x16>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000258:	e001      	b.n	800025e <LoopFillZerobss>

0800025a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025c:	3204      	adds	r2, #4

0800025e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000260:	d3fb      	bcc.n	800025a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000262:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f811 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ffc9 	bl	8000200 <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800027c:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000284:	20000020 	.word	0x20000020

08000288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC1_2_IRQHandler>
	...

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	4e0d      	ldr	r6, [pc, #52]	; (80002c4 <__libc_init_array+0x38>)
 8000290:	4c0d      	ldr	r4, [pc, #52]	; (80002c8 <__libc_init_array+0x3c>)
 8000292:	1ba4      	subs	r4, r4, r6
 8000294:	10a4      	asrs	r4, r4, #2
 8000296:	2500      	movs	r5, #0
 8000298:	42a5      	cmp	r5, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	4e0b      	ldr	r6, [pc, #44]	; (80002cc <__libc_init_array+0x40>)
 800029e:	4c0c      	ldr	r4, [pc, #48]	; (80002d0 <__libc_init_array+0x44>)
 80002a0:	f000 f818 	bl	80002d4 <_init>
 80002a4:	1ba4      	subs	r4, r4, r6
 80002a6:	10a4      	asrs	r4, r4, #2
 80002a8:	2500      	movs	r5, #0
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002b4:	4798      	blx	r3
 80002b6:	3501      	adds	r5, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002be:	4798      	blx	r3
 80002c0:	3501      	adds	r5, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002f0 	.word	0x080002f0
 80002c8:	080002f0 	.word	0x080002f0
 80002cc:	080002f0 	.word	0x080002f0
 80002d0:	080002f4 	.word	0x080002f4

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
 80002ec:	0000      	movs	r0, r0
	...
